# -*- coding: utf-8 -*-
"""python1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pn1n-qiZ9mDC7Pi66YZJQrbMcGVFoYOf

Python is a popular programming language.
 Guido van Rossum, and released in 1991.

It is used for:

web development (server-side),
software development,
mathematics,
system scripting.
"""



"""Variables : to store data in a box."""

import keyword
len(keyword.kwlist)

a = 10
print(a)

"""**Datatype** : it is  a inbuilt function, what type of data a variable is holding in python no need to specify dattaypes.(int,float,bool,str,list,tuple,set,frozenset,dictionary)

**type casting**
It is a coversion of datta from one form to another
"""

i = 10
print(type(i))
print(type(str(i)))
print(id(i))
x = True
print(x)
print(type(x))
print(int(x))

"""Note : Variable is a imutuable (changes its address at any instance )"""

i = 100
print(id(i))

"""comments : extra side headings (not part of the code)
single line : #
multiple lines : '''
"""

#commenting is an art
""" hi friends how aere you
eireoioieowiriejr
wjioeriejroj"""

"""# **Operators:      **


"""

# 1.Arthimetic operators (+,-,*,/,//,**,%)
a = " maha"
b = "laxmi"
print(a+b) # -> concatination
a*3       # -> repeation     #type error :  on this dataype we canot perform -,*)
#Relational opertaors : (based on ascili value comparing)
x = "united"
y = "states"
print(x>y)
print(x == y)
'''Special type operators :
Identity operator -> is , is not
membership operator - > in ,not in'''
a = "maha"
b = " raju"
a is b
a is not b
print( 'a' is 'ashok')
print('a' in 'ashpk')

"""# Control Statements

#
flow control statements are of three types :   conditional-if , else, if- elif-else,iterative (while ,for),tranfer -  break,continue,pass*** Control Statements*** : (one line depend on another line.
"""

a = int(input())
if a >18 :
  print("you are eligible to vote ")
else:
  print("Not eligible to vote")

"""Write a program to calculate the price of a ticket based on age for entering into a resort  conditions  age < 5 p = 0;
age is between 5 and 15 - > half;
age is betweeen 16 and 60 -> full ;
age is more then 60 price is 30% discount .
"""

age = int(input())

if age<5 :
   print('0')
   break
elif age>=5 and age<=15:
     print('half')
     break
elif age>=16 and age<=60:
  print("full")
  break
else:
    print("30%  percent discount")
    break

"""# for loop :"""

for i in " abcsdkff":
   print(i)
for i in " mahalaxmi":
  print(i ,end = " ")

"""Write a program to display the vowels in a enntered word?"""

str = "mahalaxmi"
list = ['a','e','i','o','u']
for i in str:
  if(i in list):
     print(i)

city = "hyderabad"
vowels = "aeiou"
for i in city:
  if i.lower() in vowels:
   print(i)

"""Using while loop ,write a program to print first n natural numbers?"""

n = int(input())
i = 1
while(i != n):
  print(i,end = " ")
  i= i+1

i = 10
j = 20
print(i+j)

i = 40
j = 400
if(i > j):
  print("i is greater")

else:
  print("j is greater")

r = int(input())
count  = 1
for i in range(1,r):
    count = count*i
    print(count)

principal = 10000
time = 10
rate = 5
print((principal*time*rate)/100)

p = 10000
t = 5
r = 10.25
j = (p*(1+r/100))**t
print(j-p)

#write a pythomn program to find all prime numbers within range
n = int(input())
for i in range(1,n):
  count = 0
  if( i > 1):
     for j in range(2,i):

         if(i%j) == 0 :
            count = 1
            break
     if(count == 0):
      print(i)

print (12345)

a = 20
print(ab)

r = 10
print(3.14*r*r)

#check a number is prime
n = int(input())
if n <= 1 :
  print("its not a prime")
else:
   count = 1
   for i in range(2,n):
       if( n%i == 0):
          count = 0
          break
   if(count != 0):
     print("its a prime")
   else:
     print("its not a prime")

# check a number of prime number between range
n = int(input())

for i in range(2,n):
  count = 0
  for j in range(2,i):
      if i%j == 0:
         count = 1
         break
  if count == 0:
    print(i)



a = 0
b = 1
print(a ,end = " ")
print(b,end = " ")
list1 = []
for i in range(1,20):
    c = a+b
    list1.append(c)

    a= b
    b = c
print(list1.index(144))

i = "a"
ord(i)

a ="mahalaxmi"
for i in a:
  print(ord(i))

list1 = ['+','-','*','/','%','**']
a = 10
b = 20
n = input()
if n  not in list1 :
   print("enter right operator")
else:
  if ( n == '+'):
      print(a + b)
  elif( n == '-'):
      print(a-b)
  elif( n == '*'):
      print(a*b)
  elif( n == '/'):
      print(a/b)
  elif( n == '**'):
      print(a**b)
  else:
      print(a%b)



"""# List

"""

list1 = [1,"maha",True,139]
print(list1)
print(list1[2])
print(list1[0:2:1]) #slicing
name = "mahalaxmi"
print(name[::-1])
l1 = [1,2,3,4,5,6,7,8]
l2 = [5,6,7,8,9,0,6,4]
print(l1)
l1.append(17)
print(l1)
l1.insert(2,17)
print(l1)
l1 = [1,2,3,4,5,6,5,7]
l1.remove(5)
l1.pop(1)
print(l1)
l1.sort(reverse = True)
print(l1)
#count the no of dublicants in a list
list1 = [1,2,4,5,6,3,77,8,4,3,2,2,1]
list1.count(2)
list1.count(4)
list1.count(3)
l1 = l2
print(l1)
print(l2)
print(id(l1))
print(id(l2))
list2 = [2,4,5,6,7,8,9]
list2.clear()
del(list2)

"""# Tuple
Ordered ,
duplicants are allowed,
immutuable (unchangeable),
conversion tuple to list


"""

t1 = (1,2,3,4,5,)
print(t1)
t2 = (5,)
print(t2)
print(type(t1))
t3 = (4,6,8,9,3,2,5,6)
sorted(t3)
list1 = list(t3)
list1.append(30)
t3 = tuple(list1)
print(t3)

"""# set
unordered collection
duplicants are not allowed
syntax = {}
mutable,
methods -
"""

s1 = {5,5,6,67688,6,5,4,3}
s2 = {1,3,7,9}
s2.intersection(s1)
print(s1)
print(s1)
s2.discard(1)
print(s2)
s1.add(40)
s1.update()
s1.remove(5)
s2.copy()
s1.clear()
s1.update()
s1.union(s2)
print(s1)


s = {10,20,30,40,50}
s1 = {20,40,50,60}
print(s1.intersection(s))

s = {1,2,3,4,5,6,7}
s1 = {30,46,7,7,8,9}
print(s - s1)
print(s1 - s)

#set compression
s = {x*x for x in range(1,10)}
print(s)


#remove ,add,discard

"""# Dictionary"""

d1 = {10 : "A",20 : "B" , 30 : "C", 40 : "D",50 : "E"}
print(d1)
print(d1[40])
print(id(d1))
d1.pop(20)
print(d1)
print(id(d1)) # dictionary is mutuble
d1[60] = " F"
print(d1)

"""# String"""

name = "Hyderabad"
print(name[len(name)-1])
print(name[-1])
print(name[-1:])
name1 = "   maha laxmi   "
print(name1)
print(name1.strip())
print(name1.lstrip())
print(name1.rstrip())
name = "mahalaxmi"
print(name.capitalize())
print(name.find("aha"))
a= "Bahubali is  a blockbuster"
print(a.casefold())
name = " united nations "
print(name.count('e'))
name = "united nations "
print(name.replace("nations","states"))
#split
name = "mahalaxmi"
print(name.split("a"))
#join -> it returns string value
l1 = ["7","5","2025"]
date = " ".join(l1)
print(date)
a = "mahalaskshmi"
print(a.endswith("ii"))
#string formatting methods -> upper(),lower(),title(),swapcae()
news = "Todays climate is bit harsh I need to get ready fast as soon as possible"
print(news.upper())
print(news.lower())
print(news.title())
print(news.swapcase())
n = "hi friends 123"
n1 = "23243545"
print(n.isalpha())
print(n.isalnum())
print(n1.isdigit())
print(n.isupper())
print(n.islower())
#format
name = input("Enter your name : ")
age = int(input(" Enter your age : "))
salary = input("Enter salary : ")
print("My name is {} , aged {} years.My salary is {}".format(name,age,salary))

"""# Function"""

'''function is set of statements under a block  for reusability
types : user defied functions ,built in function
syntax :def function name ( ):
            -----------
            -----------
        functionanmecall()
Based on parameters user defined (based on arguments)functions are divided into four types :
1.positional arguments (position matters ) -> wish("maha","good morning)
2.keyword arguments (position does not matter) -> wish(name = "maha" ,msg = "good morning")
3.default argument
4. variable length argument udf
'''
#positional  argument user defined function
def wish(name,msg):
  print("hi",name,msg)
wish("good morning ","maha")


# keyword argument user defined function
def wish(name,msg):
  print("hi",name,msg)
wish(msg = "good morning ",name = "maha")

#default argument user defined fumctions
def greeatings(name = "Guest"):
    print("hello " ,name)
greeatings()
greeatings("maha")

# variable length argument user defined function
def summation(*n):
  count = 0
  for i in n :
    count = count + i
  print(count )
summation(10)
summation(10,20,30,40)

# local() ---> variables within the function
# global() --> variables outside the function

#bult in functions ---> filter ,map,reduce
#these built in functions takes function as a argument an another as a sequence (function + sequence)-->parameters
#syntax = filter(function ,sequence)

list1 = [1,2,3,4,5,6,6,7,7,8,8]
def even(x):
    if x%2 == 0:
       return True
       print(x)
    else:
      return False
list2 = list(filter(even,list1))
print(list2)


list3 = [1,3,4,5,6,7,8,9,6]
def square(x):
  if x%2 == 0:

     return x*x



list4 = list(map(square,list3))
print(list4 ,end = " ")

from functools import reduce
list1 = [1,2,3,4,6,56,7]
def sum(x,y):
    return x+y
total=reduce(sum,list1)
print(total)

#write aprogram to swap the values of two variables .
# write a python code to print the n fibonaci series

a= 10
b= 30
temp = a
a= b
b = temp
print(a,b)

"""**Decorator function** : It is a function which extends a functionality of an existing function."""

def decor(func):
  def inner(name):
    if name == "Mahaa":
      print("Hello Maha")
    else:
      func(name)
  return inner



@decor
def wish(name):
  print("hello" ,name,"How are you")
wish("Maha")

def decor(func):
  def inner(a,b):
    if (b == 0):
      print("Division is not possible")
    else:
      func(a,b)
  return inner



@decor
def divide(a,b):
  print(a/b)
divide(10,0)

def decor(func):
  def inner(a):
    if a == "Mahesh babu":
      print("aliga bunga muthi pettukunna")
    elif a == "pawan kalyan":
      print("arey o sambha")
    elif a == "prabhas ":
      print("katappa kathi anduko")
    else:
      func(a)
  return inner


@decor
def dailog(a):
  print("i dont have any dailog")
dailog("Mahesh babu")

def smartbank(func):
  def inner(a,b):
    if a == "withdraw":

       print("Available balance :" , total - b)
    elif a == "deposit":

       print("Available balance : ", total + b)
    elif a == "Balance enquiry":

      print("Available balance : ",total)
    else:
      banking(a,b)




@smartbank
def banking(a,b):

    total = 10000
    print("Invalid operation try again")
banking("withdraw",600)

def decor(func):
  def inner():
      f = func()
      d = f.upper()
      return d
  return inner

def split_string(func):
  def wrapper():
      f = func()
      e = f.split()
      return e
  return wrapper






@split_string
@decor
def say_hi():
  return "hello friends how are you"
say_hi()

#It is  a function for generating sequence of data
#yeild - generative function
def countdown(num):
    print("start countdown")
    while(num > 0):
         yield num
         num  = num -1

values = countdown(10)
print(values)
for i in values :
  print(i)

"""Exception **handling**"""

'''
try,except,finally
try block can have as many as except blocks
**try** -> block where risky code is put
   **except**->handling code/alternative code
   **finally**-clean up code'''
try:
  print(10/0)
  print("An exception has not occured here")
except ZeroDivisionError  as msg:
  print("An exception has occured as a denominator is 0",msg)


try:
  x = int(input("enter first number:"))
  y = int(input("Second number : "))
  print(x/y)
  '''except ZeroDivisionError :
   print("Cant divide by zero")
except ValueError :
   print("Enter a appropriate number  ")'''

except (ZeroDivisionError,ValueError) as msg:
       print("Error occured ",msg)


#finnnaly block will be executed irrespective of try ,except
try :
  print("try block")
except :
  print("except block")
finally :
  print("finnally block ")



try :
    a = 10/0
    print(a)
except :
  print("except block")
finally:
   print("finally block")

'''variables :
it stores the  data in a Container
types :
1.class variable
2.instance variable
3.local variable
class variable : declared outside the method and inside the class
static  variable -> value cant be changed
accessed using class object
instance variable :
it is declared within the constructor or _init_ function .'''
#Local variables :
#these variables are declared directly with in a method
class Test():
  def m1(self):
    a = 1000
    print(a)
  def m2(self):
    b = 2000
    print(a)
    print(b)
t = Test()
t.m1()
t.m2()



class Test :
  a = 10
  def _init_(self):
     Test.b = 20
  def m1(self):
     Test.c = 30
print(Test.__dict__)
t = Test()
t.m1()
Test.a

from os import name
'''#methods -> functions
#types of methods :
instance method -> argument in function id=s (self)
class method
sstatic method'''


class Student:
  def __init__(self,name,marks):
     self.name = name
     self.marks = marks
  def display(self):
      print("Hi",self.name )
      print("my marks is : ",self.marks)
  def grade(self):
    if(self.marks >= 60):
      print(" you got first grade")
    elif(self.marks <= 50):
      print("You got second grade")
    elif(self.marks <= 35):
      print("You got third grade")
    else :
      print("you failded in exam")
name = input("enter your name")
marks = int(input("enter your marks : "))
s = Student(name,marks)
s.display()
s.grade()

'''class methods : if we are using only class variables then such type of method is called class method .
@classmethod'''
class Animal :
  legs = 4
  @classmethod
  def walk(cls,name):
      print("{} walks with {} legs ".format(name,cls.legs))
Animal.walk("Dog")
Animal.walk("Cat")

'''static method -> these are also caled utility methods .
we wont have any instance or class variable
using staticmethod decorator '''
class MathSession :
  @staticmethod
  def add(a,b):
    print("sum of two numbers : ", a+b)
  @staticmethod
  def product(a,b):
    print("product of two numbers : ",a*b)
MathSession.add(4,5)
MathSession.product(10,4)

#all the variable ,methods ,constructors availale in the parent class
class P:
  a = 10
  def _init_(self):
      self.b = 10
  def m1(self):
    print("parents instance method")
  @classmethod
  def m2(cls):
    print("Parent class Method")
  @staticmethod
  def m3():
    print("parent static method")
class C(P):
  pass
c = C()
print(c.a)
print(c.b)
c.m1()
c.m2()
c.m3()





#inheritence
types :
single inheritence
multilevel  inheritence
heirical inheritence

#multi level inheritence
class P :
  def m1(self):
    print("hi")
class C(P):
    def m2(self):
       print("hello")
class CC(C):
    def m3(self):
      print("vanakam")
c = CC()
c.m1()
c.m2()
c.m3()

#heirarical
class P:
  def m1(self):
     print("hi friends")
class C1(P):
   def m2(self):
       print(" hello friends ")
class C2(P):
   def m3(self):
      print(" vanakam friends")
c1 = C1()
c2 = C2()
c1.m2()
c2.m3()

'''Multiple inheritence :
 multiple classes to single class'''
 class P1:
   def m1(self):
      print("ji ")
class P2:
  def m2

#Polemarism :
class Duck :
  def talk(self):
      print(" hello duck")
class Dog:
  def talk(self):
    print("hello dog")
class Cat:
  def talk(self):
    print(" hello cat")
def f1(obj):
  obj.talk()
I = [Duck(),Dog(),Cat()]
for obj in I:
  f1(obj)

#overriding
#using same operatoer for multiple purposes -> operator overloading
class Book :
  def __init__(self,pages):
    self.pages = pages
  def __add__(self,other):
    return self.pages + other.pages
b1 = Book(100)
b2 = Book(200)
print("The total numberr of pages :" ,b1 + b2)

#overloading - same method name but different parameters
class Test:
   def m1(self):
       print("hi")
   def m1(self,a):
      print("hi this is maha",a)
   def m1(self , a,b):
      print(a+b)
t = Test()
t.m1()
t.m1(10)

#method overriding  -> the chlild class method overrids the functionality of a parent class
class P:
  def property1(self):
    print("gold")
  def mary(self):
     print(" Hello")
class C(P):
  def mary(self):
    print("hi")
c =   C()
c.property1()
c.mary()

'''from contextlib import AbstractAsyncContextManager
Abstraction :
Abstratiion methods which has only declarationn but no #syntax --
@abstract method
#def m1(self) : pass
to simplify the complex problems
eg : vehicle '''



from abc import abstractmethod
class Test:
  @abstractmethod
  def m1(self):
    print("hi")
t = Test()
t.m1()

from abc import ABC,abstractmethod
class Test(ABC):
    print("hELLO")
t = Test()

from abc import *
class Test(ABC):
  @abstractmethod
  def m1(self):
    print("hello")
t = Test()
t.m1()



from abc import *
class Vehicle(ABC):
  def noOfWheels(self):
      pass
class Bus(Vehicle):
    def noOfWheels(self):
      return 6
class Auto(Vehicle):
    def noOfWheels(self):
       return 4
b = Bus()
print(b.noOfWheels())
a = Auto()
print(a.noOfWheels())



#Quetion - 1: Build a bank system wit a account as a base class and saving account and checkimngaccount as derived class .base class should contain deposit ,withdraw ,get savings methds

"""# Quetion - 1: Build a bank system wit a account as a base class and saving account and checkimngaccount as derived class .base class should contain deposit ,withdraw ,get savings methds"""

class Bank:
  def __init__(self,name,accountno,money,total):
      self.name = name
      self.accountno= accountno
      self.money = money
      self.total = total
  def withdraw(self,total,money):
      print("Available balance is : ",total - money)
  def deposit(self,total,money):
     print("Available balance is : ",total + money)
  def checkBalance(self,total):
     print("Available Balance is : " ,total)

class Saving(Bank):



class CheckingAccount(Bank):



"""# QUESTION -2 : DESIGN A CALCULATOR USING AN OBJECT ORIENTED PROGRAMING INCLUDE EXCEPTION HANDLING FOR CALCULATIONS."""

class Calculator:
  def __init__(self,operation,a,b):
     self.a = a
     self.b = b
     self.operation = operation
class Action(Calculator):
  try:
    if(operation == '+'):
       def add(a,b):
          print(a+b)
    elif(operation == '-'):
       def substract(a,b):
          print(a-b)
    elif(operation == '*'):
       def multiply(a,b):
          print(a*b)
    elif(operaation == "/"):
       def divide(a,b):
          print(a/b)
    elif(operation == '%'):
       def percent(a,b):
          print(a%b)
    else:
        except (ZeroDivisionError,ValueError) as msg:
          print("Error occured ",msg)
          print("Enter correct operator ")
t =   Calculator()
t.a
t.b
t.operation

class Calculator:
    def __init__(self, operation, a, b):
        self.a = a
        self.b = b
        self.operation = operation

class Action(Calculator):
    def calculate(self):
        try:
            if self.operation == '+':
                print(self.a + self.b)
            elif self.operation == '-':
                print(self.a - self.b)
            elif self.operation == '*':
                print(self.a * self.b)
            elif self.operation == '/':
                print(self.a / self.b)
            elif self.operation == '%':
                print(self.a % self.b)
            else:
                print("Enter a correct operator (+, -, *, /, %)")
        except (ZeroDivisionError, ValueError) as msg:
            print("Error occurred:", msg)

# Example usage:
t = Action('+', 10, 5)
t.calculate()

class Calculator :
    def __init__(self,a,b,operation):
       self.a = a
       self.b = b
       self.operation = operation
class Action(Calculator):
    def calculate(self):
        try :
          if (self.operation == "+"):
            print(self.a + self.b)
          elif(self.operation == '-'):
            print(self.a - self.b)
          elif(self.operation == '*'):
            print(self.a * self.b)
          elif(self.operation == '/'):
            print(self.a / self.b)
          elif(self.operation == '%'):
            print(self.a % self.b)
          else:
            print("Invalid operation")



"""# Bank operations

Implemnt a basic menu driven program that allows users to perform the following operatons  -> check funds ,deposits , withdraw
2. include proper input validation and eror handing to ensure that invlaid inpures are not processed .
"""

class BankAccount :
     def __init__ (self,owner,balance = 100.0):
         self.owner = owner
         self.balance = balance
     def check_balance(self):
         print("current balance : ",self.balance )
         print(f"\n Current balance : rupees {self.balance:.2f}")
     def deposit(self,amount):
          if amount < 0 :
               print( "Depoit amount must be positive")
          else :
               self.balance +=  amount
               print(f" Rupees{amount:.2f} is deposited . New Balance : Rupees{self.balance}")
     def withdraw(self,amount):
          if amount < 0:
               print(" Withdraw amount must be positive")
          elif ampount > self.balance :
               print("Insuffiecient funds")
          else:
               self.balance -= amount
               print(f" Rupees {amount:.2f} withdrawn . Remaining amount : { self.balance}")

def main():
    print("****WELCOME TO MAGADHA BANK****")
    name = input("Enter your name: ").strip()
    account = BankAccount(name)
    while True :
          print("\nSelect an operation : ")
          print("1. Check balance ")
          print("2.Deposit Funds ")
          print("3.Withdraw funds")
          print("4.Customer support")
          print("5. Exit")

          choice = input("Enter your choice from (1-5) : ").strip()
          if choice == '1' :
             account.check_balance()
          elif choice == '2':
               try :
                    amount = float(input("Enter amount to deposit : Rupees "))
                    account.deposit(amount)
               except valueError :
                    print(" Invalid input. Please enter a numeric value ")
          elif choice == '3' :
              try :
                 amount = float(input("Enter amount to withdraw : Rupees "))
                 account.withdraw(amount)
              except valueError:
                  print("Invalid input . Please enter a numeic vlaue ")
          elif choice == '4':
                  print("f \n How can I help you \n customer number : 1800083376545")
          elif choice == '5':
               print(f"/nThank you , {name}, for visting Magadha bank , Good Bye")
               break
          else:
               print("Invalid choice . please select a valid option (1-4)")
if __name__ == "__main__" :
    main()



"""**Write a  one page explanation on the significanceof software development in BFSI ? **[link text](https://)

**Identify two major challenges in BFSI and explain how software enginneering address these challenges?**
"""

Ellustrate the software development life cycle (SDLC) stages in the context of BFSI applicationds,such as banking softwae or insurance



"""# Banking operations using OOPs :"""

'''Design a simple banking system using oops principles ,where users can create accounts , deposits and withdraw money and display account detals.
instructions :
1.Define class such as account , customer ,and transaction .
2.include methods for depost ,withdraw, and balance enquiry .
3.Demonistrate key OOPS principles such as inheritence (eg: Savings account inherits from account ) and encapsulation (" private account).'''

#Choose an object orented programming language and degign a class models  a typical BFSI Product (credit card ,loan,saving account)
instructions :
'''1.Define a class that includes attributes like account number ,interest rate and balance .
   2.Implement methods for credit ,debit and interest calulation .
   3.explan how class design in bfsi software help manage cpmplexity ( e.g : encapsulating data and behaviour)'''



"""# Functional Programming implementation :"""

def create_account(owner_name ,initial_balance  = 0.0):
  return { " owner " : owner_name, balance : initial_balance}
def check_balance(account) :
    print(f"\nCurrent balance : { account['balance'] : .2f}")
def deposit(account,amount):
    if amount < 0 :
      print("Deposits amount must be positive ")
    else :
      account['balance'] += amount
      print(f"\nDeposited amount of  : {amount:.2f},Now New balance : {account['balance']:.2f}")
def withdraw(account,amount):
  if amount < 0 :
         print("Withdraw amount must be positive ")
  elif amount > account['balance']:
        print("Insufficient funds ")
  else:
      account['balance'] -= amount
      print(f" amount {amount:.2f} withdrawn . Now Remaining money : { account['balance']:.2f}")

def main():
    print("======== Welcome to Magadha functional Bank ========")
    name = imnput("Enter your name : ").strip()
    account = create_account(name)
    while True :
        print("\n Select an operation : ")
        print("1. Check balance ")
        print("2. Deposit funds ")
        print("3. Withdraw funds ")
        print("4. Exit ")
    choice = input("Enter your choice from ( 1 - 4 ).strip()")
    if choice == 1:
       return check_balance(account)
    elif choice == "2" :
         try :
              amount = float(input("Enter amount to deposit : "))
              deposit(account,amount)
         except ValueError :
                print("Invalid choice . please enter  numeric value ")
    elif choice == "3" :
          try :
              amount = float(input("Enter amount to withdraw "))
              withdraw(account,amount)
          except ValueError :
                print("Invalid choice .Enter numeric value ")

    elif choice == "4" :
        print(f"\n Thanks ffor visiting Magadha bank , Good bye ! ")
        break
    else:
        print(" Invalid choice .please select a valid choice between ( 1-4 )")
if __name__ == " __main__" :
   main()



"""Demonstrate atleast two key functional programming concepts . immutuability ,higher order functions , or recursion in BFSI related problem . eg : calculating interest or processing a series of payments ).


*   Write a program that uses higher order functions ( function that takes functions as an arguments ) to process financial data .
*   Use recursion to solve a problem . ( eg : recursively compute compound interest over a series of years ).

**bold text**
"""